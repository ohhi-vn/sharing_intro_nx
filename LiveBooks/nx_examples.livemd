# Nx examples

```elixir
Mix.install([
  {:axon, "~> 0.6"},
  {:exla, "~> 0.7"},
  {:nx, "~> 0.7"}
])
```

## Tensor examples

```elixir
Nx.tensor([3, 2, 1])
```

```elixir
Nx.tensor([[1, 2], [3, 4], [5, 6]], type: {:f, 32}, names: [:x, :y])
```

```elixir
a = Nx.tensor([[1, 2, 3], [4, 5, 6]])
b = Nx.tensor([[6, 7, 8], [9, 10, 11]])

c = Nx.multiply(a, b)
```

```elixir
Nx.sum(c)
```

```elixir
tensor = Nx.iota({3, 1000, 1000})
```

```elixir
Nx.sum(tensor)
```

## Defn examples

Simple module uses defn macro

```elixir
defmodule MyModule do
  import Nx.Defn

  defn adds(x, n) do
    x + n
  end

  defn adds2(x, n) do
    Nx.add(x, n)
  end

  defn expr_print(x, n) do
    adds2(x, n) |> print_expr()
  end
end
```

```elixir
a = Nx.tensor([[1, 2, 3], [4, 5, 6]])
MyModule.adds2(a, 5)
```

```elixir
MyModule.expr_print(a, 7)
```

```elixir
defmodule Softmax do
  import Nx.Defn

  defn softmax(n) do
    (Nx.exp(n) / Nx.sum(Nx.exp(n)))
    |> print_expr()
  end
end

a = Nx.tensor([[1, 2], [3, 4]])

Softmax.softmax(a)
```

Vectorization example

```elixir
defmodule MyModule2 do
  import Nx.Defn

  defn normalize(t) do
    case Nx.shape(t) do
      {_} -> :ok
      _ -> raise "invalid shape"
    end

    min = Nx.reduce_min(t)
    zero_min = Nx.subtract(t, min)
    Nx.divide(zero_min, Nx.reduce_max(zero_min))
  end
end
```

```elixir
MyModule2.normalize(Nx.tensor([3, 2, 6]))
```
